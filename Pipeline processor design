module pipelined_processor(
    input clk,
    input reset
);

    // Register and Memory Definitions
    reg [7:0] regfile [0:7];         // 8 registers, 8 bits each
    reg [15:0] instr_mem [0:15];     // 16 instructions
    reg [7:0] data_mem [0:255];      // 256 bytes data memory
    reg [3:0] pc;

    // Pipeline Registers
    reg [15:0] IF_ID_instr;
    reg [3:0]  IF_ID_pc;
    reg [15:0] ID_EX_instr;
    reg [7:0]  ID_EX_rs_val, ID_EX_rt_val;
    reg [3:0]  ID_EX_pc;
    reg [15:0] EX_WB_instr;
    reg [7:0]  EX_WB_alu_out;
    reg [7:0]  EX_WB_mem_out;
    reg [3:0]  EX_WB_dest;

    // Fetch Stage
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            pc <= 0;
        end else begin
            IF_ID_instr <= instr_mem[pc];
            IF_ID_pc <= pc;
            pc <= pc + 1;
        end
    end

    // Decode Stage
    wire [1:0] opcode = IF_ID_instr[15:14];
    wire [2:0] rd = IF_ID_instr[13:11];
    wire [2:0] rs = IF_ID_instr[10:8];
    wire [2:0] rt = IF_ID_instr[7:5];
    always @(posedge clk) begin
        ID_EX_instr <= IF_ID_instr;
        ID_EX_pc    <= IF_ID_pc;
        ID_EX_rs_val <= regfile[rs];
        ID_EX_rt_val <= regfile[rt];
    end

    // Execute Stage
    wire [1:0] ex_opcode = ID_EX_instr[15:14];
    wire [2:0] ex_rd = ID_EX_instr[13:11];
    wire [2:0] ex_rs = ID_EX_instr[10:8];
    wire [2:0] ex_rt = ID_EX_instr[7:5];
    reg [7:0] alu_out, mem_out;
    always @(posedge clk) begin
        EX_WB_instr <= ID_EX_instr;
        EX_WB_dest <= ex_rd;
        case (ex_opcode)
            2'b00: alu_out <= ID_EX_rs_val + ID_EX_rt_val; // ADD
            2'b01: alu_out <= ID_EX_rs_val - ID_EX_rt_val; // SUB
            2'b10: mem_out <= data_mem[ID_EX_rs_val];      // LOAD
            default: alu_out <= 0;
        endcase
        EX_WB_alu_out <= alu_out;
        EX_WB_mem_out <= mem_out;
    end

    // Write Back Stage
    wire [1:0] wb_opcode = EX_WB_instr[15:14];
    always @(posedge clk) begin
        case (wb_opcode)
            2'b00, 2'b01: regfile[EX_WB_dest] <= EX_WB_alu_out; // ADD, SUB
            2'b10:        regfile[EX_WB_dest] <= EX_WB_mem_out; // LOAD
        endcase
    end

endmodule
module pipeline_tb();
    reg clk = 0, reset = 1;
    pipelined_processor uut(.clk(clk), .reset(reset));
    initial begin
        // Initialize instruction and data memory here if needed
        // Example: ADD r1, r2, r3
        uut.instr_mem[0] = 16'b00_001_010_011_00000; // ADD r1, r2, r3
        uut.instr_mem[1] = 16'b01_010_001_011_00000; // SUB r2, r1, r3
        uut.instr_mem[2] = 16'b10_011_100_000_00000; // LOAD r3, [r4]

        // Initialize registers
        uut.regfile[2] = 8'd5;
        uut.regfile[3] = 8'd3;
        uut.regfile[4] = 8'd10;
        uut.data_mem[10] = 8'd42;

        #5 reset = 0;
        repeat (10) #5 clk = ~clk;
        $finish;
    end
endmodule
